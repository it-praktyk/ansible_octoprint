---
# tasks file for octoprint

- name: Install octoprint dependencies.
  package:
    name: "{{ octoprint_dependencies }}"
    state: present
    update_cache: yes

- name: Add octoprint user to required groups.
  user:
    name: "{{ octoprint_user }}"
    groups: tty, dialout
    append: true

- name: Add sudo with no passwords rights for octoprint user
  template:
    src: sudo.j2
    dest: "/etc/sudoers.d/{{ octoprint_user }}"
    mode: 0640

- name: Create octoprint directory.
  file:
    path: "{{ install_dir }}/Octoprint"
    state: directory
    owner: "{{ octoprint_user }}"

- name: Create user config directory.
  file:
    path: "{{ install_dir }}/.octoprint/"
    state: directory
    owner: "{{ octoprint_user }}"

- name: Install octoprint via pip - the latest verstion.
  pip:
    name: "{{ latest_octoprint_url }}"
    state: present
    virtualenv: "{{ install_dir }}/Octoprint/venv"
    virtualenv_command: virtualenv
    virtualenv_python: python3
  when: octoprint_version == 'latest'

- name: Install octoprint via pip - the defined version.
  pip:
    name: octoprint
    version: "{{ octoprint_version }}"
    state: present
    virtualenv: "{{ install_dir }}/Octoprint/venv"
    virtualenv_command: virtualenv
    virtualenv_python: python3
  when: octoprint_version != 'latest'

- name: Check existence of config.yaml
  stat:
    path: "{{ install_dir }}/.octoprint/config.yaml"
  changed_when: false
  register: existing_config

- name: Install config.yaml template.
  template:
    src: config.yaml.j2
    dest: "{{ install_dir }}/.octoprint/config.yaml"
    owner: "{{ octoprint_user }}"
  notify:
    - restart octoprint
  when: not ( keep_octoprint_config | bool ) or not ( existing_config.stat.exists | bool )

- name: Install default template.
  template:
    src: octoprint.default.j2
    dest: /etc/default/octoprint
    owner: "{{ octoprint_user }}"
  notify:
    - reload systemd

- name: Install systemd service template.
  template:
    src: octoprint.service.j2
    dest: /etc/systemd/system/octoprint.service
    owner: "{{ octoprint_user }}"
  notify:
    - reload systemd

- meta: flush_handlers

- name: Enable and start octoprint service.
  service:
    name: octoprint
    enabled: true
    state: started
